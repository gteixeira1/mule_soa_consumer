package com.hello.name.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.5.1
 * 2015-09-11T15:50:52.298-03:00
 * Generated source version: 2.5.1
 * 
 */
@WebServiceClient(name = "HelloService", 
                  wsdlLocation = "http://t320webservices.open.ac.uk/t320/services/HelloService?wsdl",
                  targetNamespace = "http://nks34.t320") 
public class HelloService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://nks34.t320", "HelloService");
    public final static QName HelloServiceHttpport = new QName("http://nks34.t320", "HelloServiceHttpport");
    public final static QName HelloServiceHttpport1 = new QName("http://nks34.t320", "HelloServiceHttpport1");
    public final static QName HelloServiceSOAP11PortHttp1 = new QName("http://nks34.t320", "HelloServiceSOAP11port_http1");
    public final static QName HelloServiceSOAP11PortHttps = new QName("http://nks34.t320", "HelloServiceSOAP11port_https");
    public final static QName HelloServiceSOAP12PortHttp1 = new QName("http://nks34.t320", "HelloServiceSOAP12port_http1");
    public final static QName HelloServiceSOAP12PortHttps = new QName("http://nks34.t320", "HelloServiceSOAP12port_https");
    static {
        URL url = null;
        try {
            url = new URL("http://t320webservices.open.ac.uk/t320/services/HelloService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HelloService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://t320webservices.open.ac.uk/t320/services/HelloService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HelloService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HelloService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HelloService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceHttpport")
    public HelloServicePortType getHelloServiceHttpport() {
        return super.getPort(HelloServiceHttpport, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceHttpport")
    public HelloServicePortType getHelloServiceHttpport(WebServiceFeature... features) {
        return super.getPort(HelloServiceHttpport, HelloServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceHttpport1")
    public HelloServicePortType getHelloServiceHttpport1() {
        return super.getPort(HelloServiceHttpport1, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceHttpport1")
    public HelloServicePortType getHelloServiceHttpport1(WebServiceFeature... features) {
        return super.getPort(HelloServiceHttpport1, HelloServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP11port_http1")
    public HelloServicePortType getHelloServiceSOAP11PortHttp1() {
        return super.getPort(HelloServiceSOAP11PortHttp1, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP11port_http1")
    public HelloServicePortType getHelloServiceSOAP11PortHttp1(WebServiceFeature... features) {
        return super.getPort(HelloServiceSOAP11PortHttp1, HelloServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP11port_https")
    public HelloServicePortType getHelloServiceSOAP11PortHttps() {
        return super.getPort(HelloServiceSOAP11PortHttps, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP11port_https")
    public HelloServicePortType getHelloServiceSOAP11PortHttps(WebServiceFeature... features) {
        return super.getPort(HelloServiceSOAP11PortHttps, HelloServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP12port_http1")
    public HelloServicePortType getHelloServiceSOAP12PortHttp1() {
        return super.getPort(HelloServiceSOAP12PortHttp1, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP12port_http1")
    public HelloServicePortType getHelloServiceSOAP12PortHttp1(WebServiceFeature... features) {
        return super.getPort(HelloServiceSOAP12PortHttp1, HelloServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP12port_https")
    public HelloServicePortType getHelloServiceSOAP12PortHttps() {
        return super.getPort(HelloServiceSOAP12PortHttps, HelloServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloServicePortType
     */
    @WebEndpoint(name = "HelloServiceSOAP12port_https")
    public HelloServicePortType getHelloServiceSOAP12PortHttps(WebServiceFeature... features) {
        return super.getPort(HelloServiceSOAP12PortHttps, HelloServicePortType.class, features);
    }

}
